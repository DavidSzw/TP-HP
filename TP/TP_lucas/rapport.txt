Difficultés de parallélisation
Fenêtre de voisinage :

Le filtre bilatéral utilise une fenêtre de voisinage pour chaque pixel, ce qui signifie que chaque pixel de sortie dépend de plusieurs pixels d'entrée autour de lui. Cela crée une dépendance spatiale qui complique la parallélisation.
Pour paralléliser ce processus, il faut s'assurer que chaque thread ou unité de traitement a accès à tous les pixels nécessaires dans la fenêtre de voisinage. Cela peut nécessiter des copies de données ou des mécanismes de synchronisation pour éviter les conflits d'accès.
Accès mémoire :

Les accès mémoire non contigus peuvent réduire l'efficacité de la parallélisation. Dans le filtre bilatéral, les pixels voisins sont souvent dispersés en mémoire, ce qui peut entraîner des cache misses et des ralentissements.
L'utilisation de structures de données contiguës et l'optimisation de l'accès mémoire peuvent améliorer les performances. Par exemple, en réorganisant les données pour qu'elles soient plus locales en mémoire.

Performance : 
En utilisant seulement les CPU, le programme tp.c mets 0.447 secondes à appliquer le filtre bilatéral sur l'image lena512.bmp.
En utilisant les CPU et les GPU, le programme tp.cu met 0.118 secondes à appliquer le filtre bilatéral sur l'image lena512.bmp.
L'utilisation des GPU et de CUDA permet donc d'appliquer le filtre quatres fois plus rapidment sur l'image. 